{"version":3,"file":"GoogleSignIn.js","sourceRoot":"","sources":["../src/GoogleSignIn.ts"],"names":[],"mappings":"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","sourcesContent":["import Constants from 'expo-constants';\nimport { UnavailabilityError } from '@unimodules/core';\nimport invariant from 'invariant';\n\nimport ExpoGoogleSignIn from './ExpoGoogleSignIn';\nimport GoogleUser from './GoogleUser';\n\nimport { GoogleSignInOptions, GoogleSignInAuthResult } from './GoogleSignIn.types';\n\nexport const { ERRORS, SCOPES, TYPES } = ExpoGoogleSignIn;\n\nconst DEFAULT_SCOPES = [SCOPES.PROFILE, SCOPES.EMAIL];\n\nlet _initialization: Promise<void>;\nlet _options: GoogleSignInOptions;\nlet _currentUser: GoogleUser | null = null;\nlet _isClientUsageEnabled = false;\n\nfunction setCurrentUser(currentUser: GoogleUser | null): GoogleUser | null {\n  _currentUser = currentUser;\n  return _currentUser;\n}\n\nfunction validateOptions(options?: GoogleSignInOptions): GoogleSignInOptions {\n  if (!options) {\n    return {\n      scopes: DEFAULT_SCOPES,\n    };\n  }\n  if (options.isOfflineEnabled) {\n    invariant(\n      typeof options.webClientId === 'string' && options.webClientId !== '',\n      'GoogleSignIn: Offline access (isOfflineEnabled: true) requires a valid google server id `webClientId`'\n    );\n  }\n\n  return {\n    ...options,\n    scopes: options.scopes || DEFAULT_SCOPES,\n  };\n}\n\nfunction validateOwnership() {\n  invariant(\n    _isClientUsageEnabled || Constants.appOwnership !== 'expo',\n    'expo-google-sign-in is not supported in the Expo Client because a custom URL scheme is required at build time. Please refer to the docs for usage outside of Expo www.npmjs.com/package/expo-google-sign-in'\n  );\n}\n\nasync function ensureGoogleIsInitializedAsync(options?: GoogleSignInOptions): Promise<any> {\n  if (_initialization == null) {\n    return initAsync(options);\n  }\n  return _initialization;\n}\n\nasync function invokeAuthMethod(method: string): Promise<GoogleUser | null> {\n  if (!ExpoGoogleSignIn[method]) {\n    throw new UnavailabilityError('GoogleSignIn', method);\n  }\n  await ensureGoogleIsInitializedAsync();\n  const payload = await ExpoGoogleSignIn[method]();\n  let account = payload != null ? new GoogleUser(payload) : null;\n  return setCurrentUser(account);\n}\n\nexport function allowInClient() {\n  _isClientUsageEnabled = true;\n}\n\nexport function getCurrentUser(): GoogleUser | null {\n  return _currentUser;\n}\n\nexport async function askForPlayServicesAsync(): Promise<boolean> {\n  return await getPlayServiceAvailability(true);\n}\n\nexport async function getPlayServiceAvailability(shouldAsk: boolean = false): Promise<boolean> {\n  validateOwnership();\n\n  if (ExpoGoogleSignIn.arePlayServicesAvailableAsync) {\n    return await ExpoGoogleSignIn.arePlayServicesAvailableAsync(shouldAsk);\n  } else {\n    return true;\n  }\n}\n\nexport async function initAsync(options?: GoogleSignInOptions): Promise<void> {\n  if (!ExpoGoogleSignIn.initAsync) {\n    throw new UnavailabilityError('GoogleSignIn', 'initAsync');\n  }\n\n  _options = validateOptions(options || _options || {});\n\n  const hasPlayServices = await getPlayServiceAvailability();\n  if (!hasPlayServices) {\n    return;\n  }\n\n  _initialization = ExpoGoogleSignIn.initAsync(_options || {});\n\n  return _initialization;\n}\n\nexport async function isSignedInAsync(): Promise<boolean> {\n  const user = await getCurrentUserAsync();\n  return user != null;\n}\n\nexport async function isConnectedAsync(): Promise<boolean> {\n  return await ExpoGoogleSignIn.isConnectedAsync();\n}\n\nexport async function signInSilentlyAsync(): Promise<GoogleUser | null> {\n  const isConnected = await isConnectedAsync();\n  if (isConnected) {\n    try {\n      const auth = await invokeAuthMethod('signInSilentlyAsync');\n      return auth;\n    } catch (error) {\n      /* Return null to create parity with Android */\n      if (error.code === ERRORS.SIGN_IN_REQUIRED) {\n        return null;\n      }\n      throw error;\n    }\n  }\n  return null;\n}\n\nexport async function signInAsync(): Promise<GoogleSignInAuthResult> {\n  try {\n    const user = await invokeAuthMethod('signInAsync');\n    return { type: 'success', user };\n  } catch (error) {\n    if (error.code === ERRORS.SIGN_IN_CANCELLED) {\n      return { type: 'cancel', user: null };\n    }\n    throw error;\n  }\n}\n\nexport async function signOutAsync(): Promise<void> {\n  await invokeAuthMethod('signOutAsync');\n}\n\nexport async function disconnectAsync(): Promise<void> {\n  await invokeAuthMethod('disconnectAsync');\n}\n\nexport async function getCurrentUserAsync(): Promise<GoogleUser | null> {\n  return await invokeAuthMethod('getCurrentUserAsync');\n}\n\nexport async function getPhotoAsync(size: number = 128): Promise<string | null> {\n  if (!ExpoGoogleSignIn.getPhotoAsync) {\n    throw new UnavailabilityError('GoogleSignIn', 'getPhotoAsync');\n  }\n\n  await ensureGoogleIsInitializedAsync();\n  return await ExpoGoogleSignIn.getPhotoAsync(size);\n}\n\nexport { default as GoogleAuthData } from './GoogleAuthData';\nexport { default as GoogleAuthentication } from './GoogleAuthentication';\nexport { default as GoogleIdentity } from './GoogleIdentity';\nexport { default as GoogleUser } from './GoogleUser';\n\nexport {\n  GoogleSignInType,\n  GoogleSignInOptions,\n  GoogleSignInAuthResultType,\n  GoogleSignInAuthResult,\n} from './GoogleSignIn.types';\n"]}