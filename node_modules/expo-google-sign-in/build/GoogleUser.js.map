{"version":3,"file":"GoogleUser.js","sourceRoot":"","sources":["../src/GoogleUser.ts"],"names":[],"mappings":"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","sourcesContent":["import { UnavailabilityError } from '@unimodules/core';\nimport invariant from 'invariant';\n\nimport ExpoGoogleSignIn from './ExpoGoogleSignIn';\nimport GoogleAuthentication from './GoogleAuthentication';\nimport GoogleIdentity from './GoogleIdentity';\n\nclass GoogleUser extends GoogleIdentity {\n  auth: GoogleAuthentication | null;\n  scopes: string[];\n  hostedDomain?: string;\n  serverAuthCode?: string;\n\n  constructor(options) {\n    super(options);\n    const { auth, scopes, hostedDomain, serverAuthCode } = options;\n\n    this.auth = auth;\n    this.scopes = scopes;\n    this.hostedDomain = hostedDomain;\n    this.serverAuthCode = serverAuthCode;\n  }\n\n  clearCache = async () => {\n    if (!ExpoGoogleSignIn.clearCacheAsync) {\n      return;\n    }\n    if (!this.auth || !this.auth.accessToken) {\n      throw new Error('GoogleSignIn: GoogleUser.clearCache(): Invalid accessToken');\n    }\n    return await ExpoGoogleSignIn.clearCacheAsync({ token: this.auth.accessToken });\n  };\n\n  getHeaders = (): {\n    [key: string]: string;\n  } => {\n    if (!this.auth || !this.auth.accessToken || !this.auth.accessToken.length) {\n      throw new Error('GoogleSignIn: GoogleUser.getHeaders(): Invalid accessToken');\n    }\n    return {\n      Authorization: `Bearer ${this.auth.accessToken}`,\n      Accept: 'application/json',\n      'Content-Type': 'application/json',\n    };\n  };\n\n  refreshAuth = async (): Promise<GoogleAuthentication | null> => {\n    if (!ExpoGoogleSignIn.getTokensAsync) {\n      throw new UnavailabilityError('GoogleSignIn', 'getTokensAsync');\n    }\n    const response: {\n      idToken?: string;\n      accessToken?: string;\n      auth?: {\n        accessToken?: string;\n      };\n    } = await ExpoGoogleSignIn.getTokensAsync(false);\n    if (response.idToken == null && this.auth) {\n      response.idToken = this.auth.idToken;\n    }\n    if (!this.auth) {\n      this.auth = new GoogleAuthentication(response);\n    } else {\n      this.auth.idToken = response.idToken;\n      this.auth.accessToken = response.accessToken;\n    }\n    return this.auth;\n  };\n\n  equals(other: any): boolean {\n    if (!super.equals(other) || !(other instanceof GoogleUser)) {\n      return false;\n    }\n\n    if (this.auth != null) {\n      return (\n        this.auth.equals(other.auth) &&\n        this.scopes === other.scopes &&\n        this.hostedDomain === other.hostedDomain &&\n        this.serverAuthCode === other.serverAuthCode\n      );\n    } else {\n      return other.auth == null;\n    }\n  }\n\n  toJSON(): { [key: string]: any } {\n    let auth: any = this.auth;\n    if (this.auth && this.auth.toJSON) {\n      auth = this.auth.toJSON();\n    }\n\n    return {\n      ...super.toJSON(),\n      auth,\n      scopes: this.scopes,\n      hostedDomain: this.hostedDomain,\n      serverAuthCode: this.serverAuthCode,\n    };\n  }\n}\n\nexport default GoogleUser;\n"]}