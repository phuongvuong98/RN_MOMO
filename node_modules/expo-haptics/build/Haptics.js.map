{"version":3,"file":"Haptics.js","sourceRoot":"","sources":["../src/Haptics.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,mBAAmB,EAAE,MAAM,kBAAkB,CAAC;AAEvD,OAAO,WAAW,MAAM,eAAe,CAAC;AACxC,OAAO,EAAE,wBAAwB,EAAE,mBAAmB,EAAE,MAAM,iBAAiB,CAAC;AAEhF,MAAM,CAAC,KAAK,UAAU,YAAY,CAAC,OAAiC,wBAAwB,CAAC,OAAO;IAClG,OAAO,CAAC,IAAI,CAAC,gFAAgF,CAAC,CAAC;IAC/F,MAAM,iBAAiB,CAAC,IAAI,CAAC,CAAC;AAChC,CAAC;AAED,MAAM,CAAC,KAAK,UAAU,MAAM,CAAC,QAA6B,mBAAmB,CAAC,MAAM;IAClF,OAAO,CAAC,IAAI,CAAC,oEAAoE,CAAC,CAAC;IACnF,MAAM,WAAW,CAAC,KAAK,CAAC,CAAC;AAC3B,CAAC;AAED,MAAM,CAAC,KAAK,UAAU,SAAS;IAC7B,OAAO,CAAC,IAAI,CAAC,0EAA0E,CAAC,CAAC;IACzF,MAAM,cAAc,EAAE,CAAC;AACzB,CAAC;AAED;;GAEG;AACH,MAAM,CAAC,KAAK,UAAU,iBAAiB,CAAC,OAAiC,wBAAwB,CAAC,OAAO;IACvG,IAAI,CAAC,WAAW,CAAC,iBAAiB,EAAE;QAClC,MAAM,IAAI,mBAAmB,CAAC,SAAS,EAAE,mBAAmB,CAAC,CAAC;KAC/D;IACD,MAAM,WAAW,CAAC,iBAAiB,CAAC,IAAI,CAAC,CAAC;AAC5C,CAAC;AAED;;GAEG;AACH,MAAM,CAAC,KAAK,UAAU,WAAW,CAAC,QAA6B,mBAAmB,CAAC,MAAM;IACvF,IAAI,CAAC,WAAW,CAAC,WAAW,EAAE;QAC5B,MAAM,IAAI,mBAAmB,CAAC,QAAQ,EAAE,aAAa,CAAC,CAAC;KACxD;IACD,MAAM,WAAW,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC;AACvC,CAAC;AAED;;GAEG;AACH,MAAM,CAAC,KAAK,UAAU,cAAc;IAClC,IAAI,CAAC,WAAW,CAAC,cAAc,EAAE;QAC/B,MAAM,IAAI,mBAAmB,CAAC,QAAQ,EAAE,gBAAgB,CAAC,CAAC;KAC3D;IACD,MAAM,WAAW,CAAC,cAAc,EAAE,CAAC;AACrC,CAAC;AAED,OAAO,EAAE,wBAAwB,EAAE,mBAAmB,EAAE,CAAC","sourcesContent":["import { UnavailabilityError } from '@unimodules/core';\n\nimport ExpoHaptics from './ExpoHaptics';\nimport { NotificationFeedbackType, ImpactFeedbackStyle } from './Haptics.types';\n\nexport async function notification(type: NotificationFeedbackType = NotificationFeedbackType.Success): Promise<void> {\n  console.warn('`Haptics.notification` is deprecated. Use `Haptics.notificationAsync` instead.');\n  await notificationAsync(type);\n}\n\nexport async function impact(style: ImpactFeedbackStyle = ImpactFeedbackStyle.Medium): Promise<void> {\n  console.warn('`Haptics.impact` is deprecated. Use `Haptics.impactAsync` instead.');\n  await impactAsync(style);\n}\n\nexport async function selection(): Promise<void> {\n  console.warn('`Haptics.selection` is deprecated. Use `Haptics.selectionAsync` instead.');\n  await selectionAsync();\n}\n\n/**\n * Triggers notification feedback.\n */\nexport async function notificationAsync(type: NotificationFeedbackType = NotificationFeedbackType.Success): Promise<void> {\n  if (!ExpoHaptics.notificationAsync) {\n    throw new UnavailabilityError('Haptics', 'notificationAsync');\n  }\n  await ExpoHaptics.notificationAsync(type);\n}\n\n/**\n * Triggers impact feedback.\n */\nexport async function impactAsync(style: ImpactFeedbackStyle = ImpactFeedbackStyle.Medium): Promise<void> {\n  if (!ExpoHaptics.impactAsync) {\n    throw new UnavailabilityError('Haptic', 'impactAsync');\n  }\n  await ExpoHaptics.impactAsync(style);\n}\n\n/**\n * Triggers selection feedback.\n */\nexport async function selectionAsync(): Promise<void> {\n  if (!ExpoHaptics.selectionAsync) {\n    throw new UnavailabilityError('Haptic', 'selectionAsync');\n  }\n  await ExpoHaptics.selectionAsync();\n}\n\nexport { NotificationFeedbackType, ImpactFeedbackStyle };\n"]}