{"version":3,"sources":["eventListenerManagement.js"],"names":["NativeModules","NetInfo","describe","beforeEach","clearEventListeners","RNCNetInfo","getCurrentConnectivity","mockResolvedValue","type","effectiveType","it","addEventListener","jest","fn","expect","addListener","toBeCalledWith","Events","NetworkStatusDidChange","not","toBeCalled","subscription","remove","listener","removeEventListener","removeListeners"],"mappings":"AAUA,OAAQA,aAAR,KAA4B,cAA5B,CACA,MAAOC,CAAAA,OAAP,KAAoB,UAApB,CAEAC,QAAQ,CAAC,sBAAD,CAAyB,UAAM,CACrCA,QAAQ,CAAC,2BAAD,CAA8B,UAAM,CAC1CC,UAAU,CAAC,UAAM,CACfF,OAAO,CAACG,mBAAR,GAEAJ,aAAa,CAACK,UAAd,CAAyBC,sBAAzB,CAAgDC,iBAAhD,CAAkE,CAChEC,IAAI,CAAE,UAD0D,CAEhEC,aAAa,CAAE,IAFiD,CAAlE,EAID,CAPS,CAAV,CASAC,EAAE,CAAC,kFAAD,CAAqF,UAAM,CAC3FT,OAAO,CAACU,gBAAR,CAAyB,kBAAzB,CAA6CC,IAAI,CAACC,EAAL,EAA7C,EACAC,MAAM,CAACd,aAAa,CAACK,UAAd,CAAyBU,WAA1B,CAAN,CAA6CC,cAA7C,CACEf,OAAO,CAACgB,MAAR,CAAeC,sBADjB,EAGD,CALC,CAAF,CAOAR,EAAE,CAAC,qDAAD,CAAwD,UAAM,CAE9DT,OAAO,CAACU,gBAAR,CAAyB,WAAzB,CAAsCC,IAAI,CAACC,EAAL,EAAtC,EACAC,MAAM,CAACd,aAAa,CAACK,UAAd,CAAyBU,WAA1B,CAAN,CAA6CI,GAA7C,CAAiDC,UAAjD,GACD,CAJC,CAAF,CAMAV,EAAE,CAAC,iEAAD,CAAoE,UAAM,CAE1E,GAAMW,CAAAA,YAAY,CAAGpB,OAAO,CAACU,gBAAR,CAAyB,WAAzB,CAAsCC,IAAI,CAACC,EAAL,EAAtC,CAArB,CACAQ,YAAY,CAACC,MAAb,GACAR,MAAM,CAACd,aAAa,CAACK,UAAd,CAAyBU,WAA1B,CAAN,CAA6CI,GAA7C,CAAiDC,UAAjD,GACD,CALC,CAAF,CAOAV,EAAE,CAAC,oFAAD,CAAuF,UAAM,CAC7F,GAAMa,CAAAA,QAAQ,CAAGX,IAAI,CAACC,EAAL,EAAjB,CACAZ,OAAO,CAACU,gBAAR,CAAyB,kBAAzB,CAA6CY,QAA7C,EACAtB,OAAO,CAACuB,mBAAR,CAA4B,kBAA5B,CAAgDD,QAAhD,EACAT,MAAM,CAACd,aAAa,CAACK,UAAd,CAAyBoB,eAA1B,CAAN,CAAiDL,UAAjD,GACD,CALC,CAAF,CAOAV,EAAE,CAAC,uFAAD,CAA0F,UAAM,CAChGT,OAAO,CAACuB,mBAAR,CAA4B,kBAA5B,CAAgDZ,IAAI,CAACC,EAAL,EAAhD,EACAC,MAAM,CAACd,aAAa,CAACK,UAAd,CAAyBoB,eAA1B,CAAN,CAAiDN,GAAjD,CAAqDC,UAArD,GACD,CAHC,CAAF,CAKAV,EAAE,CAAC,oGAAD,CAAuG,UAAM,CAC7G,GAAMa,CAAAA,QAAQ,CAAGX,IAAI,CAACC,EAAL,EAAjB,CACA,GAAMQ,CAAAA,YAAY,CAAGpB,OAAO,CAACU,gBAAR,CACnB,kBADmB,CAEnBY,QAFmB,CAArB,CAIAF,YAAY,CAACC,MAAb,GACAR,MAAM,CAACd,aAAa,CAACK,UAAd,CAAyBoB,eAA1B,CAAN,CAAiDL,UAAjD,GACD,CARC,CAAF,CASD,CAnDO,CAAR,CAoDD,CArDO,CAAR","sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * @flow\n */\n\nimport {NativeModules} from 'react-native';\nimport NetInfo from '../index';\n\ndescribe('react-native-netinfo', () => {\n  describe('Event listener management', () => {\n    beforeEach(() => {\n      NetInfo.clearEventListeners();\n\n      NativeModules.RNCNetInfo.getCurrentConnectivity.mockResolvedValue({\n        type: 'cellular',\n        effectiveType: '3g',\n      });\n    });\n\n    it('should add the listener to the native module when passing the correct event name', () => {\n      NetInfo.addEventListener('connectionChange', jest.fn());\n      expect(NativeModules.RNCNetInfo.addListener).toBeCalledWith(\n        NetInfo.Events.NetworkStatusDidChange,\n      );\n    });\n\n    it('should do nothing when passing the wrong event name', () => {\n      // $FlowExpectedError We are testing passing in the wrong name\n      NetInfo.addEventListener('WRONGNAME', jest.fn());\n      expect(NativeModules.RNCNetInfo.addListener).not.toBeCalled();\n    });\n\n    it('should not error when calling remove on an invalid subscription', () => {\n      // $FlowExpectedError We are testing passing in the wrong name\n      const subscription = NetInfo.addEventListener('WRONGNAME', jest.fn());\n      subscription.remove();\n      expect(NativeModules.RNCNetInfo.addListener).not.toBeCalled();\n    });\n\n    it('should remove the listener from the native module when calling removeEventListener', () => {\n      const listener = jest.fn();\n      NetInfo.addEventListener('connectionChange', listener);\n      NetInfo.removeEventListener('connectionChange', listener);\n      expect(NativeModules.RNCNetInfo.removeListeners).toBeCalled();\n    });\n\n    it('should not call the native module if asked to remove a listener which was never added', () => {\n      NetInfo.removeEventListener('connectionChange', jest.fn());\n      expect(NativeModules.RNCNetInfo.removeListeners).not.toBeCalled();\n    });\n\n    it('should remove the listener from the native module when calling remove on the returned subscription', () => {\n      const listener = jest.fn();\n      const subscription = NetInfo.addEventListener(\n        'connectionChange',\n        listener,\n      );\n      subscription.remove();\n      expect(NativeModules.RNCNetInfo.removeListeners).toBeCalled();\n    });\n  });\n});\n"]}