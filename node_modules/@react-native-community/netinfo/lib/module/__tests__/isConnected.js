import{NativeModules}from'react-native';import NetInfo from'../index';import{RNCNetInfo,NetInfoEventEmitter}from'../nativeInterface';var CONNECTED_STATES=[{type:'cellular',connected:true},{type:'wifi',connected:true},{type:'bluetooth',connected:true},{type:'ethernet',connected:true},{type:'wimax',connected:true},{type:'none',connected:false},{type:'unknown',connected:false}];describe('react-native-netinfo',function(){describe('isConnected',function(){beforeEach(function(){NetInfo.clearEventListeners();RNCNetInfo.getCurrentConnectivity.mockResolvedValue({type:'cellular',effectiveType:'3g'});});describe('fetch',function(){CONNECTED_STATES.map(function(_ref){var type=_ref.type,connected=_ref.connected;it("should resolve to "+connected.toString()+" when the native module returns a "+type+" state",function(){NativeModules.RNCNetInfo.getCurrentConnectivity.mockResolvedValue({type:type,effectiveType:'unknown'});return expect(NetInfo.isConnected.fetch()).resolves.toBe(connected);});});it('should pass on errors through the promise chain',function(){var expectedError=new Error('A test error');NativeModules.RNCNetInfo.getCurrentConnectivity.mockRejectedValue(expectedError);return expect(NetInfo.getConnectionInfo()).rejects.toBe(expectedError);});});describe('Event listener management',function(){it('should add the listener to the native module when passing the correct event name',function(){NetInfo.isConnected.addEventListener('connectionChange',jest.fn());expect(NativeModules.RNCNetInfo.addListener).toBeCalledWith(NetInfo.Events.NetworkStatusDidChange);});it('should do nothing when passing the wrong event name',function(){NetInfo.isConnected.addEventListener('WRONGNAME',jest.fn());expect(NativeModules.RNCNetInfo.addListener).not.toBeCalled();});it('should remove the listener from the native module when calling removeEventListener',function(){var listener=jest.fn();NetInfo.isConnected.addEventListener('connectionChange',listener);NetInfo.isConnected.removeEventListener('connectionChange',listener);expect(NativeModules.RNCNetInfo.removeListeners).toBeCalled();});it('should remove the listener from the native module when calling remove on the returned subscription',function(){var listener=jest.fn();var subscription=NetInfo.isConnected.addEventListener('connectionChange',listener);subscription.remove();expect(NativeModules.RNCNetInfo.removeListeners).toBeCalled();});it('should not remove the listener from the native module when calling remove on the returned subscription if there is another subscription',function(){var listener1=jest.fn();var listener2=jest.fn();var subscription1=NetInfo.isConnected.addEventListener('connectionChange',listener1);var subscription2=NetInfo.isConnected.addEventListener('connectionChange',listener2);subscription1.remove();expect(NativeModules.RNCNetInfo.removeListeners).not.toBeCalled();subscription2.remove();expect(NativeModules.RNCNetInfo.removeListeners).toBeCalled();});});describe('Event listener callbacks',function(){it('should call the listener when listening even if no event is emitted',function(){var listener=jest.fn();NetInfo.isConnected.addEventListener('connectionChange',listener);expect(listener).toBeCalledWith(true);});it('should call the listener when the native event is emmitted',function(){var listener=jest.fn();NetInfo.isConnected.addEventListener('connectionChange',listener);NetInfoEventEmitter.emit(NetInfo.Events.NetworkStatusDidChange,{type:'cellular',effectiveType:'4g'});expect(listener).toBeCalledWith(true);});it('should call the listener multiple times when multiple native events are emmitted',function(){var listener=jest.fn();NetInfo.isConnected.addEventListener('connectionChange',listener);NetInfoEventEmitter.emit(NetInfo.Events.NetworkStatusDidChange,{type:'cellular',effectiveType:'3g'});NetInfoEventEmitter.emit(NetInfo.Events.NetworkStatusDidChange,{type:'wifi',effectiveType:'unknown'});expect(listener).toBeCalledTimes(3);});it('should call all listeners when the native event is emmitted',function(){var listener1=jest.fn();var listener2=jest.fn();NetInfo.isConnected.addEventListener('connectionChange',listener1);NetInfo.isConnected.addEventListener('connectionChange',listener2);NetInfoEventEmitter.emit(NetInfo.Events.NetworkStatusDidChange,{type:'cellular',effectiveType:'2g'});expect(listener1).toBeCalledWith(true);expect(listener2).toBeCalledWith(true);});it('should not call the listener after being removed',function(){var listener=jest.fn();NetInfo.isConnected.addEventListener('connectionChange',listener);NetInfo.isConnected.removeEventListener('connectionChange',listener);listener.mockClear();NetInfoEventEmitter.emit(NetInfo.Events.NetworkStatusDidChange,{type:'cellular',effectiveType:'3g'});expect(listener).not.toBeCalled();});it('should call the remaining listeners when one has been removed',function(){var listener1=jest.fn();var listener2=jest.fn();NetInfo.isConnected.addEventListener('connectionChange',listener1);NetInfo.isConnected.addEventListener('connectionChange',listener2);NetInfo.isConnected.removeEventListener('connectionChange',listener1);listener1.mockClear();listener2.mockClear();NetInfoEventEmitter.emit(NetInfo.Events.NetworkStatusDidChange,{type:'unknown',effectiveType:'unknown'});expect(listener1).not.toBeCalled();expect(listener2).toBeCalledWith(false);});});});});
//# sourceMappingURL=isConnected.js.map