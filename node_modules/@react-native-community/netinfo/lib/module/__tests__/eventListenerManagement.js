import{NativeModules}from'react-native';import NetInfo from'../index';describe('react-native-netinfo',function(){describe('Event listener management',function(){beforeEach(function(){NetInfo.clearEventListeners();NativeModules.RNCNetInfo.getCurrentConnectivity.mockResolvedValue({type:'cellular',effectiveType:'3g'});});it('should add the listener to the native module when passing the correct event name',function(){NetInfo.addEventListener('connectionChange',jest.fn());expect(NativeModules.RNCNetInfo.addListener).toBeCalledWith(NetInfo.Events.NetworkStatusDidChange);});it('should do nothing when passing the wrong event name',function(){NetInfo.addEventListener('WRONGNAME',jest.fn());expect(NativeModules.RNCNetInfo.addListener).not.toBeCalled();});it('should not error when calling remove on an invalid subscription',function(){var subscription=NetInfo.addEventListener('WRONGNAME',jest.fn());subscription.remove();expect(NativeModules.RNCNetInfo.addListener).not.toBeCalled();});it('should remove the listener from the native module when calling removeEventListener',function(){var listener=jest.fn();NetInfo.addEventListener('connectionChange',listener);NetInfo.removeEventListener('connectionChange',listener);expect(NativeModules.RNCNetInfo.removeListeners).toBeCalled();});it('should not call the native module if asked to remove a listener which was never added',function(){NetInfo.removeEventListener('connectionChange',jest.fn());expect(NativeModules.RNCNetInfo.removeListeners).not.toBeCalled();});it('should remove the listener from the native module when calling remove on the returned subscription',function(){var listener=jest.fn();var subscription=NetInfo.addEventListener('connectionChange',listener);subscription.remove();expect(NativeModules.RNCNetInfo.removeListeners).toBeCalled();});});});
//# sourceMappingURL=eventListenerManagement.js.map