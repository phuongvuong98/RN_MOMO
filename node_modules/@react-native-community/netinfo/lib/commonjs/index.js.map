{"version":3,"sources":["index.js"],"names":["DEVICE_CONNECTIVITY_EVENT","CHANGE_EVENT_NAME","_subscriptions","Set","_isConnectedSubscriptions","Map","_latestNetInfo","_eventSubscription","_isConnected","netInfoData","type","_listenerHandler","handler","NetInfo","Events","NetworkStatusDidChange","addEventListener","eventName","console","warn","remove","add","getConnectionInfo","then","netInfo","size","NetInfoEventEmitter","addListener","removeEventListener","delete","clearEventListeners","listener","RNCNetInfo","getCurrentConnectivity","isConnected","connection","set","get","fetch","isConnectionExpensive","Platform","OS","isConnectionMetered","Promise","reject","Error","module","exports"],"mappings":"AAUA,aAEA,yCACA,kDAWA,GAAMA,CAAAA,yBAAyB,CAAG,gCAAlC,CACA,GAAMC,CAAAA,iBAAiB,CAAG,kBAA1B,CASA,GAAMC,CAAAA,cAAc,CAAG,GAAIC,CAAAA,GAAJ,EAAvB,CACA,GAAMC,CAAAA,yBAAyB,CAAG,GAAIC,CAAAA,GAAJ,EAAlC,CACA,GAAIC,CAAAA,cAAkC,CAAG,IAAzC,CACA,GAAIC,CAAAA,kBAAuC,CAAG,IAA9C,CAEA,QAASC,CAAAA,YAAT,CAAsBC,WAAtB,CAAyD,CACvD,MAAOA,CAAAA,WAAW,CAACC,IAAZ,GAAqB,MAArB,EAA+BD,WAAW,CAACC,IAAZ,GAAqB,SAA3D,CACD,CAED,QAASC,CAAAA,gBAAT,CAA0BF,WAA1B,CAAoD,CAClDH,cAAc,CAAGG,WAAjB,CACA,kBAAoBP,cAApB,4IAAoC,uIAA3BU,CAAAA,QAA2B,MAClCA,QAAO,CAACN,cAAD,CAAP,CACD,CACF,CAKD,GAAMO,CAAAA,OAAO,CAAG,CACdC,MAAM,CAAE,CACNC,sBAAsB,CAAEf,yBADlB,CADM,CAQdgB,gBARc,2BASZC,SATY,CAUZL,OAVY,CAWU,CACtB,GAAIK,SAAS,GAAKhB,iBAAlB,CAAqC,CACnCiB,OAAO,CAACC,IAAR,CAAa,0CAA4CF,SAA5C,CAAwD,GAArE,EACA,MAAO,CACLG,MAAM,CAAE,iBAAM,CAAE,CADX,CAAP,CAGD,CAEDlB,cAAc,CAACmB,GAAf,CAAmBT,OAAnB,EAEA,GAAIN,cAAJ,CAAoB,CAClBM,OAAO,CAACN,cAAD,CAAP,CACD,CAFD,IAEO,CACLO,OAAO,CAACS,iBAAR,GAA4BC,IAA5B,CAAiC,SAAAC,OAAO,CAAI,CAC1ClB,cAAc,CAAGkB,OAAjB,CACAZ,OAAO,CAACN,cAAD,CAAP,CACD,CAHD,EAID,CAED,GAAIJ,cAAc,CAACuB,IAAf,CAAsB,CAAtB,EAA2B,CAAClB,kBAAhC,CAAoD,CAIlDA,kBAAkB,CAAGmB,qCAAoBC,WAApB,CACnB3B,yBADmB,CAEnBW,gBAFmB,CAArB,CAID,CAED,MAAO,CACLS,MAAM,CAAE,wBAAMP,CAAAA,OAAO,CAACe,mBAAR,CAA4BX,SAA5B,CAAuCL,OAAvC,CAAN,EADH,CAAP,CAGD,CA3Ca,CAgDdgB,mBAhDc,8BAiDZX,SAjDY,CAkDZL,OAlDY,CAmDN,CACNV,cAAc,CAAC2B,MAAf,CAAsBjB,OAAtB,EAEA,GAAIV,cAAc,CAACuB,IAAf,GAAwB,CAAxB,EAA6BlB,kBAAjC,CAAqD,CACnDA,kBAAkB,CAACa,MAAnB,GACAb,kBAAkB,CAAG,IAArB,CACD,CACF,CA1Da,CA+DduB,mBA/Dc,+BA+Dc,CAC1B,mBAAqB5B,cAArB,mJAAqC,mJAA5B6B,CAAAA,SAA4B,OACnClB,OAAO,CAACe,mBAAR,CAA4B3B,iBAA5B,CAA+C8B,SAA/C,EACD,CACF,CAnEa,CAwEdT,iBAxEc,6BAwE4B,CACxC,MAAOU,6BAAWC,sBAAX,EAAP,CACD,CA1Ea,CAkFdC,WAAW,CAAE,CACXlB,gBADW,2BAETC,SAFS,CAGTL,OAHS,CAIa,CACtB,GAAMmB,CAAAA,QAAQ,CAAG,QAAXA,CAAAA,QAAW,CAAAI,UAAU,CAAI,CAC7B,GAAIlB,SAAS,GAAKhB,iBAAlB,CAAqC,CACnCW,OAAO,CAACJ,YAAY,CAAC2B,UAAD,CAAb,CAAP,CACD,CACF,CAJD,CAKA/B,yBAAyB,CAACgC,GAA1B,CAA8BxB,OAA9B,CAAuCmB,QAAvC,EACAlB,OAAO,CAACG,gBAAR,CAAyBC,SAAzB,CAAoCc,QAApC,EACA,MAAO,CACLX,MAAM,CAAE,wBACNP,CAAAA,OAAO,CAACqB,WAAR,CAAoBN,mBAApB,CAAwCX,SAAxC,CAAmDL,OAAnD,CADM,EADH,CAAP,CAID,CAhBU,CAkBXgB,mBAlBW,8BAmBTX,SAnBS,CAoBTL,OApBS,CAqBH,CACN,GAAMmB,CAAAA,QAAQ,CAAG3B,yBAAyB,CAACiC,GAA1B,CAA8BzB,OAA9B,CAAjB,CACAmB,QAAQ,EAAIlB,OAAO,CAACe,mBAAR,CAA4BX,SAA5B,CAAuCc,QAAvC,CAAZ,CACA3B,yBAAyB,CAACyB,MAA1B,CAAiCjB,OAAjC,EACD,CAzBU,CA2BX0B,KA3BW,iBA2BW,CACpB,MAAOzB,CAAAA,OAAO,CAACS,iBAAR,GAA4BC,IAA5B,CAAiCf,YAAjC,CAAP,CACD,CA7BU,CAlFC,CAkHd+B,qBAlHc,iCAkH4B,CACxC,MAAOC,uBAASC,EAAT,GAAgB,SAAhB,CACHT,4BAAWU,mBAAX,EADG,CAEHC,OAAO,CAACC,MAAR,CAAe,GAAIC,CAAAA,KAAJ,CAAU,gCAAV,CAAf,CAFJ,CAGD,CAtHa,CAAhB,CAyHAC,MAAM,CAACC,OAAP,CAAiBlC,OAAjB","sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * @flow\n */\n\n'use strict';\n\nimport {Platform} from 'react-native';\nimport {RNCNetInfo, NetInfoEventEmitter} from './nativeInterface';\nimport type {\n  NetInfoData as _NetInfoData,\n  NetInfoType as _NetInfoType,\n  NetInfoEffectiveType as _NetInfoEffectiveType,\n} from './types';\n\nexport type NetInfoData = _NetInfoData;\nexport type NetInfoType = _NetInfoType;\nexport type NetInfoEffectiveType = _NetInfoEffectiveType;\n\nconst DEVICE_CONNECTIVITY_EVENT = 'netInfo.networkStatusDidChange';\nconst CHANGE_EVENT_NAME = 'connectionChange';\n\ntype ChangeEventName = 'connectionChange';\n\ntype ChangeHandler = (data: NetInfoData) => void;\ntype IsConnectedHandler = (isConnected: boolean) => void;\n// Ideally we would use the EmitterSubscription from react-native, but it is not publicly exported\ntype Subscription = {remove: () => void};\n\nconst _subscriptions = new Set<ChangeHandler>();\nconst _isConnectedSubscriptions = new Map();\nlet _latestNetInfo: NetInfoData | null = null;\nlet _eventSubscription: Subscription | null = null;\n\nfunction _isConnected(netInfoData: NetInfoData): boolean {\n  return netInfoData.type !== 'none' && netInfoData.type !== 'unknown';\n}\n\nfunction _listenerHandler(netInfoData: NetInfoData) {\n  _latestNetInfo = netInfoData;\n  for (let handler of _subscriptions) {\n    handler(_latestNetInfo);\n  }\n}\n\n/**\n * NetInfo exposes info about online/offline status.\n */\nconst NetInfo = {\n  Events: {\n    NetworkStatusDidChange: DEVICE_CONNECTIVITY_EVENT,\n  },\n\n  /**\n   * Adds an event handler.\n   */\n  addEventListener(\n    eventName: ChangeEventName,\n    handler: ChangeHandler,\n  ): {remove: () => void} {\n    if (eventName !== CHANGE_EVENT_NAME) {\n      console.warn('Trying to subscribe to unknown event: \"' + eventName + '\"');\n      return {\n        remove: () => {},\n      };\n    }\n\n    _subscriptions.add(handler);\n\n    if (_latestNetInfo) {\n      handler(_latestNetInfo);\n    } else {\n      NetInfo.getConnectionInfo().then(netInfo => {\n        _latestNetInfo = netInfo;\n        handler(_latestNetInfo);\n      });\n    }\n\n    if (_subscriptions.size > 0 && !_eventSubscription) {\n      // The EmitterSubscription type is slightly different than the one we use. Ideally we would\n      // use it directly, but it is not public.\n      // $FlowExpectedError\n      _eventSubscription = NetInfoEventEmitter.addListener(\n        DEVICE_CONNECTIVITY_EVENT,\n        _listenerHandler,\n      );\n    }\n\n    return {\n      remove: () => NetInfo.removeEventListener(eventName, handler),\n    };\n  },\n\n  /**\n   * Removes the listener for network status changes.\n   */\n  removeEventListener(\n    eventName: ChangeEventName,\n    handler: ChangeHandler,\n  ): void {\n    _subscriptions.delete(handler);\n\n    if (_subscriptions.size === 0 && _eventSubscription) {\n      _eventSubscription.remove();\n      _eventSubscription = null;\n    }\n  },\n\n  /**\n   * Removes all listeners.\n   */\n  clearEventListeners(): void {\n    for (let listener of _subscriptions) {\n      NetInfo.removeEventListener(CHANGE_EVENT_NAME, listener);\n    }\n  },\n\n  /**\n   * Get the current connection info.\n   */\n  getConnectionInfo(): Promise<NetInfoData> {\n    return RNCNetInfo.getCurrentConnectivity();\n  },\n\n  /**\n   * An object with the same methods as above but the listener receives a\n   * boolean which represents the internet connectivity.\n   *\n   * See https://facebook.github.io/react-native/docs/netinfo.html#isconnected\n   */\n  isConnected: {\n    addEventListener(\n      eventName: ChangeEventName,\n      handler: IsConnectedHandler,\n    ): {remove: () => void} {\n      const listener = connection => {\n        if (eventName === CHANGE_EVENT_NAME) {\n          handler(_isConnected(connection));\n        }\n      };\n      _isConnectedSubscriptions.set(handler, listener);\n      NetInfo.addEventListener(eventName, listener);\n      return {\n        remove: () =>\n          NetInfo.isConnected.removeEventListener(eventName, handler),\n      };\n    },\n\n    removeEventListener(\n      eventName: ChangeEventName,\n      handler: IsConnectedHandler,\n    ): void {\n      const listener = _isConnectedSubscriptions.get(handler);\n      listener && NetInfo.removeEventListener(eventName, listener);\n      _isConnectedSubscriptions.delete(handler);\n    },\n\n    fetch(): Promise<any> {\n      return NetInfo.getConnectionInfo().then(_isConnected);\n    },\n  },\n\n  isConnectionExpensive(): Promise<boolean> {\n    return Platform.OS === 'android'\n      ? RNCNetInfo.isConnectionMetered()\n      : Promise.reject(new Error('Currently not supported on iOS'));\n  },\n};\n\nmodule.exports = NetInfo;\n"]}