{"version":3,"sources":["getConnectionInfo.js"],"names":["describe","it","expectedConnectionType","expectedEffectiveConnectionType","RNCNetInfo","getCurrentConnectivity","mockResolvedValue","type","effectiveType","expect","NetInfo","getConnectionInfo","resolves","toEqual","expectedError","Error","mockRejectedValue","rejects","toBe"],"mappings":"mFAUA,uDACA,mDAEAA,QAAQ,CAAC,sBAAD,CAAyB,UAAM,CACrCA,QAAQ,CAAC,mBAAD,CAAsB,UAAM,CAClCC,EAAE,CAAC,+DAAD,CAAkE,UAAM,CACxE,GAAMC,CAAAA,sBAAsB,CAAG,UAA/B,CACA,GAAMC,CAAAA,+BAA+B,CAAG,IAAxC,CAEAC,4BAAWC,sBAAX,CAAkCC,iBAAlC,CAAoD,CAClDC,IAAI,CAAEL,sBAD4C,CAElDM,aAAa,CAAEL,+BAFmC,CAApD,EAKA,MAAOM,CAAAA,MAAM,CAACC,eAAQC,iBAAR,EAAD,CAAN,CAAoCC,QAApC,CAA6CC,OAA7C,CAAqD,CAC1DN,IAAI,CAAEL,sBADoD,CAE1DM,aAAa,CAAEL,+BAF2C,CAArD,CAAP,CAID,CAbC,CAAF,CAeAF,EAAE,CAAC,iDAAD,CAAoD,UAAM,CAC1D,GAAMa,CAAAA,aAAa,CAAG,GAAIC,CAAAA,KAAJ,CAAU,cAAV,CAAtB,CAEAX,4BAAWC,sBAAX,CAAkCW,iBAAlC,CAAoDF,aAApD,EAEA,MAAOL,CAAAA,MAAM,CAACC,eAAQC,iBAAR,EAAD,CAAN,CAAoCM,OAApC,CAA4CC,IAA5C,CAAiDJ,aAAjD,CAAP,CACD,CANC,CAAF,CAOD,CAvBO,CAAR,CAwBD,CAzBO,CAAR","sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * @flow\n */\n\nimport NetInfo from '../index';\nimport {RNCNetInfo} from '../nativeInterface';\n\ndescribe('react-native-netinfo', () => {\n  describe('getConnectionInfo', () => {\n    it('should pass on the responses when the library promise returns', () => {\n      const expectedConnectionType = 'cellular';\n      const expectedEffectiveConnectionType = '3g';\n\n      RNCNetInfo.getCurrentConnectivity.mockResolvedValue({\n        type: expectedConnectionType,\n        effectiveType: expectedEffectiveConnectionType,\n      });\n\n      return expect(NetInfo.getConnectionInfo()).resolves.toEqual({\n        type: expectedConnectionType,\n        effectiveType: expectedEffectiveConnectionType,\n      });\n    });\n\n    it('should pass on errors through the promise chain', () => {\n      const expectedError = new Error('A test error');\n\n      RNCNetInfo.getCurrentConnectivity.mockRejectedValue(expectedError);\n\n      return expect(NetInfo.getConnectionInfo()).rejects.toBe(expectedError);\n    });\n  });\n});\n"]}