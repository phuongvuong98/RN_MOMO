{"version":3,"sources":["eventListenerCallbacks.js"],"names":["describe","beforeEach","NetInfo","clearEventListeners","RNCNetInfo","getCurrentConnectivity","mockResolvedValue","type","effectiveType","it","done","listener","jest","fn","addEventListener","setImmediate","expect","toBeCalled","expectedConnectionType","expectedEffectiveConnectionType","NetInfoEventEmitter","emit","Events","NetworkStatusDidChange","toBeCalledWith","toBeCalledTimes","listener1","listener2","expectedResults","removeEventListener","mockClear","not"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * @flow\n */\n\nimport NetInfo from '../index';\nimport {RNCNetInfo, NetInfoEventEmitter} from '../nativeInterface';\n\ndescribe('react-native-netinfo', () => {\n  describe('Event listener callbacks', () => {\n    beforeEach(() => {\n      NetInfo.clearEventListeners();\n\n      RNCNetInfo.getCurrentConnectivity.mockResolvedValue({\n        type: 'cellular',\n        effectiveType: '3g',\n      });\n    });\n\n    it('should call the listener on listening', done => {\n      const listener = jest.fn();\n      NetInfo.addEventListener('connectionChange', listener);\n\n      setImmediate(() => {\n        expect(listener).toBeCalled();\n        done();\n      });\n    });\n\n    it('should call the listener when the native event is emmitted', () => {\n      const listener = jest.fn();\n      NetInfo.addEventListener('connectionChange', listener);\n\n      const expectedConnectionType = 'cellular';\n      const expectedEffectiveConnectionType = '3g';\n\n      NetInfoEventEmitter.emit(NetInfo.Events.NetworkStatusDidChange, {\n        type: expectedConnectionType,\n        effectiveType: expectedEffectiveConnectionType,\n      });\n\n      expect(listener).toBeCalledWith({\n        type: expectedConnectionType,\n        effectiveType: expectedEffectiveConnectionType,\n      });\n    });\n\n    it('should call the listener multiple times when multiple native events are emmitted', () => {\n      const listener = jest.fn();\n      NetInfo.addEventListener('connectionChange', listener);\n\n      NetInfoEventEmitter.emit(NetInfo.Events.NetworkStatusDidChange, {\n        type: 'cellular',\n        effectiveType: '3g',\n      });\n      NetInfoEventEmitter.emit(NetInfo.Events.NetworkStatusDidChange, {\n        type: 'wifi',\n        effectiveType: 'unknown',\n      });\n\n      // The additional time is from the call on listen\n      expect(listener).toBeCalledTimes(3);\n    });\n\n    it('should call all listeners when the native event is emmitted', () => {\n      const listener1 = jest.fn();\n      const listener2 = jest.fn();\n      NetInfo.addEventListener('connectionChange', listener1);\n      NetInfo.addEventListener('connectionChange', listener2);\n\n      const expectedConnectionType = 'cellular';\n      const expectedEffectiveConnectionType = '3g';\n\n      NetInfoEventEmitter.emit(NetInfo.Events.NetworkStatusDidChange, {\n        type: expectedConnectionType,\n        effectiveType: expectedEffectiveConnectionType,\n      });\n\n      const expectedResults = {\n        type: expectedConnectionType,\n        effectiveType: expectedEffectiveConnectionType,\n      };\n\n      expect(listener1).toBeCalledWith(expectedResults);\n      expect(listener2).toBeCalledWith(expectedResults);\n    });\n\n    it('should not call the listener after being removed', () => {\n      const listener = jest.fn();\n      NetInfo.addEventListener('connectionChange', listener);\n      NetInfo.removeEventListener('connectionChange', listener);\n\n      // Clear the stats from the call on listen\n      listener.mockClear();\n\n      NetInfoEventEmitter.emit(NetInfo.Events.NetworkStatusDidChange, {\n        type: 'cellular',\n        effectiveType: '3g',\n      });\n\n      expect(listener).not.toBeCalled();\n    });\n\n    it('should call the remaining listeners when one has been removed', () => {\n      const listener1 = jest.fn();\n      const listener2 = jest.fn();\n      NetInfo.addEventListener('connectionChange', listener1);\n      NetInfo.addEventListener('connectionChange', listener2);\n\n      NetInfo.removeEventListener('connectionChange', listener1);\n\n      // Clear the stats from the call on listen\n      listener1.mockClear();\n\n      const expectedConnectionType = 'cellular';\n      const expectedEffectiveConnectionType = '3g';\n\n      NetInfoEventEmitter.emit(NetInfo.Events.NetworkStatusDidChange, {\n        type: expectedConnectionType,\n        effectiveType: expectedEffectiveConnectionType,\n      });\n\n      expect(listener1).not.toBeCalled();\n      expect(listener2).toBeCalledWith({\n        type: expectedConnectionType,\n        effectiveType: expectedEffectiveConnectionType,\n      });\n    });\n  });\n});\n"]}