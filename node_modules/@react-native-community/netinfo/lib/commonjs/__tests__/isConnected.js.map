{"version":3,"sources":["isConnected.js"],"names":["CONNECTED_STATES","type","connected","describe","beforeEach","NetInfo","clearEventListeners","RNCNetInfo","getCurrentConnectivity","mockResolvedValue","effectiveType","map","it","toString","NativeModules","expect","isConnected","fetch","resolves","toBe","expectedError","Error","mockRejectedValue","getConnectionInfo","rejects","addEventListener","jest","fn","addListener","toBeCalledWith","Events","NetworkStatusDidChange","not","toBeCalled","listener","removeEventListener","removeListeners","subscription","remove","listener1","listener2","subscription1","subscription2","NetInfoEventEmitter","emit","toBeCalledTimes","mockClear"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * @flow\n */\n\nimport {NativeModules} from 'react-native';\nimport NetInfo from '../index';\nimport {RNCNetInfo, NetInfoEventEmitter} from '../nativeInterface';\n\nconst CONNECTED_STATES = [\n  {type: 'cellular', connected: true},\n  {type: 'wifi', connected: true},\n  {type: 'bluetooth', connected: true},\n  {type: 'ethernet', connected: true},\n  {type: 'wimax', connected: true},\n  {type: 'none', connected: false},\n  {type: 'unknown', connected: false},\n];\n\ndescribe('react-native-netinfo', () => {\n  describe('isConnected', () => {\n    beforeEach(() => {\n      NetInfo.clearEventListeners();\n\n      RNCNetInfo.getCurrentConnectivity.mockResolvedValue({\n        type: 'cellular',\n        effectiveType: '3g',\n      });\n    });\n\n    describe('fetch', () => {\n      CONNECTED_STATES.map(({type, connected}) => {\n        it(`should resolve to ${connected.toString()} when the native module returns a ${type} state`, () => {\n          NativeModules.RNCNetInfo.getCurrentConnectivity.mockResolvedValue({\n            type: type,\n            effectiveType: 'unknown',\n          });\n\n          return expect(NetInfo.isConnected.fetch()).resolves.toBe(connected);\n        });\n      });\n\n      it('should pass on errors through the promise chain', () => {\n        const expectedError = new Error('A test error');\n\n        NativeModules.RNCNetInfo.getCurrentConnectivity.mockRejectedValue(\n          expectedError,\n        );\n\n        return expect(NetInfo.getConnectionInfo()).rejects.toBe(expectedError);\n      });\n    });\n\n    describe('Event listener management', () => {\n      it('should add the listener to the native module when passing the correct event name', () => {\n        NetInfo.isConnected.addEventListener('connectionChange', jest.fn());\n        expect(NativeModules.RNCNetInfo.addListener).toBeCalledWith(\n          NetInfo.Events.NetworkStatusDidChange,\n        );\n      });\n\n      it('should do nothing when passing the wrong event name', () => {\n        // $FlowExpectedError We are testing passing in the wrong name\n        NetInfo.isConnected.addEventListener('WRONGNAME', jest.fn());\n        expect(NativeModules.RNCNetInfo.addListener).not.toBeCalled();\n      });\n\n      it('should remove the listener from the native module when calling removeEventListener', () => {\n        const listener = jest.fn();\n        NetInfo.isConnected.addEventListener('connectionChange', listener);\n        NetInfo.isConnected.removeEventListener('connectionChange', listener);\n        expect(NativeModules.RNCNetInfo.removeListeners).toBeCalled();\n      });\n\n      it('should remove the listener from the native module when calling remove on the returned subscription', () => {\n        const listener = jest.fn();\n        const subscription = NetInfo.isConnected.addEventListener(\n          'connectionChange',\n          listener,\n        );\n        subscription.remove();\n        expect(NativeModules.RNCNetInfo.removeListeners).toBeCalled();\n      });\n\n      it('should not remove the listener from the native module when calling remove on the returned subscription if there is another subscription', () => {\n        const listener1 = jest.fn();\n        const listener2 = jest.fn();\n        const subscription1 = NetInfo.isConnected.addEventListener(\n          'connectionChange',\n          listener1,\n        );\n        const subscription2 = NetInfo.isConnected.addEventListener(\n          'connectionChange',\n          listener2,\n        );\n\n        subscription1.remove();\n        expect(NativeModules.RNCNetInfo.removeListeners).not.toBeCalled();\n\n        subscription2.remove();\n        expect(NativeModules.RNCNetInfo.removeListeners).toBeCalled();\n      });\n    });\n\n    describe('Event listener callbacks', () => {\n      it('should call the listener when listening even if no event is emitted', () => {\n        const listener = jest.fn();\n        NetInfo.isConnected.addEventListener('connectionChange', listener);\n\n        expect(listener).toBeCalledWith(true);\n      });\n\n      it('should call the listener when the native event is emmitted', () => {\n        const listener = jest.fn();\n        NetInfo.isConnected.addEventListener('connectionChange', listener);\n\n        NetInfoEventEmitter.emit(NetInfo.Events.NetworkStatusDidChange, {\n          type: 'cellular',\n          effectiveType: '4g',\n        });\n\n        expect(listener).toBeCalledWith(true);\n      });\n\n      it('should call the listener multiple times when multiple native events are emmitted', () => {\n        const listener = jest.fn();\n        NetInfo.isConnected.addEventListener('connectionChange', listener);\n\n        NetInfoEventEmitter.emit(NetInfo.Events.NetworkStatusDidChange, {\n          type: 'cellular',\n          effectiveType: '3g',\n        });\n        NetInfoEventEmitter.emit(NetInfo.Events.NetworkStatusDidChange, {\n          type: 'wifi',\n          effectiveType: 'unknown',\n        });\n\n        // The additional time is from the call to \"getCurrentConnectivity\" on listening\n        expect(listener).toBeCalledTimes(3);\n      });\n\n      it('should call all listeners when the native event is emmitted', () => {\n        const listener1 = jest.fn();\n        const listener2 = jest.fn();\n        NetInfo.isConnected.addEventListener('connectionChange', listener1);\n        NetInfo.isConnected.addEventListener('connectionChange', listener2);\n\n        NetInfoEventEmitter.emit(NetInfo.Events.NetworkStatusDidChange, {\n          type: 'cellular',\n          effectiveType: '2g',\n        });\n\n        expect(listener1).toBeCalledWith(true);\n        expect(listener2).toBeCalledWith(true);\n      });\n\n      it('should not call the listener after being removed', () => {\n        const listener = jest.fn();\n        NetInfo.isConnected.addEventListener('connectionChange', listener);\n        NetInfo.isConnected.removeEventListener('connectionChange', listener);\n\n        // This clears the stats from the call which was made on listening\n        listener.mockClear();\n\n        NetInfoEventEmitter.emit(NetInfo.Events.NetworkStatusDidChange, {\n          type: 'cellular',\n          effectiveType: '3g',\n        });\n\n        expect(listener).not.toBeCalled();\n      });\n\n      it('should call the remaining listeners when one has been removed', () => {\n        const listener1 = jest.fn();\n        const listener2 = jest.fn();\n        NetInfo.isConnected.addEventListener('connectionChange', listener1);\n        NetInfo.isConnected.addEventListener('connectionChange', listener2);\n\n        NetInfo.isConnected.removeEventListener('connectionChange', listener1);\n\n        // This clears the stats from the call which was made on listening\n        listener1.mockClear();\n        listener2.mockClear();\n\n        NetInfoEventEmitter.emit(NetInfo.Events.NetworkStatusDidChange, {\n          type: 'unknown',\n          effectiveType: 'unknown',\n        });\n\n        expect(listener1).not.toBeCalled();\n        expect(listener2).toBeCalledWith(false);\n      });\n    });\n  });\n});\n"]}