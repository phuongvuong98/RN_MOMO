{"version":3,"file":"withNativeAd.js","sourceRoot":"","sources":["../src/withNativeAd.tsx"],"names":[],"mappings":"AACA,OAAO,UAAU,MAAM,YAAY,CAAC;AACpC,OAAO,KAAK,MAAM,OAAO,CAAC;AAC1B,OAAO,EAAE,QAAQ,EAAQ,cAAc,EAAE,MAAM,cAAc,CAAC;AAC9D,OAAO,EAAE,wBAAwB,EAAE,MAAM,kBAAkB,CAAC;AAI5D,OAAO,UAAU,MAAM,oBAAoB,CAAC;AAE5C,IAAI,cAAc,GAA+B,QAAQ,CAAC,EAAE,KAAK,SAAS,CAAC,CAAC,CAAC,wBAAwB,CAAC,gBAAgB,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC;AAqB/H;;;;;;GAMG;AACH,MAAM,CAAC,OAAO,UAAU,YAAY,CAClC,SAA2C;IAE3C,OAAO,MAAM,iBAAkB,SAAQ,KAAK,CAAC,SAAgD;QAS3F,YAAY,KAA0B;YACpC,KAAK,CAAC,KAAK,CAAC,CAAC;YATf,kBAAa,GAA6B,IAAI,CAAC;YAC/C,qBAAgB,GAAG,KAAK,CAAC,SAAS,EAAgB,CAAC;YACnD,2BAAsB,GAAkB,IAAI,CAAC;YAC7C,0BAAqB,GAAkB,IAAI,CAAC;YAC5C,mCAA8B,GAAiC,IAAI,GAAG,EAAE,CAAC;YA0EzE,oBAAe,GAAG,CAAC,EAAE,WAAW,EAAE,EAAE,EAA6B,EAAE,EAAE;gBACnE,IAAI,CAAC,QAAQ,CAAC,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE;oBACzB,IAAI,IAAI,CAAC,KAAK,CAAC,UAAU,EAAE;wBACzB,IAAI,EAAE,GAAG,UAAU,CAAC,IAAI,CAAC,KAAK,CAAC,EAAE,CAAC,CAAC;wBACnC,IAAI,CAAC,KAAK,CAAC,UAAU,CAAC,EAAE,CAAC,CAAC;qBAC3B;gBACH,CAAC,CAAC,CAAC;YACL,CAAC,CAAC;YAEF,6BAAwB,GAAG;gBACzB,SAAS,EAAE,CAAC,SAAmC,EAAE,EAAE;oBACjD,IAAI,SAAS,EAAE;wBACb,IAAI,CAAC,iBAAiB,CAAC,EAAE,qBAAqB,EAAE,UAAU,CAAC,cAAc,CAAC,SAAS,CAAC,CAAC,EAAE,CAAC,CAAC;qBAC1F;yBAAM;wBACL,IAAI,CAAC,iBAAiB,CAAC,EAAE,qBAAqB,EAAE,IAAI,EAAE,CAAC,CAAC;qBACzD;gBACH,CAAC;aACF,CAAC;YAEF,+BAA0B,GAAG;gBAC3B,eAAe,EAAE,IAAI,CAAC,gBAAgB;aACvC,CAAC;YAEF,4BAAuB,GAAG;gBACxB,SAAS,EAAE,CAAC,SAAkC,EAAE,EAAE;oBAChD,IAAI,SAAS,EAAE;wBACb,IAAI,CAAC,iBAAiB,CAAC,EAAE,oBAAoB,EAAE,UAAU,CAAC,cAAc,CAAC,SAAS,CAAC,CAAC,EAAE,CAAC,CAAC;qBACzF;yBAAM;wBACL,IAAI,CAAC,iBAAiB,CAAC,EAAE,oBAAoB,EAAE,IAAI,EAAE,CAAC,CAAC;qBACxD;gBACH,CAAC;aACF,CAAC;YAEF,+BAA0B,GAAG;gBAC3B,iBAAiB,EAAE,CAAC,SAA0B,EAAE,EAAE;oBAChD,IAAI,UAAU,GAAG,UAAU,CAAC,cAAc,CAAC,SAAS,CAAC,CAAC,CAAC;oBACvD,IAAI,6BAA6B,GAAG,IAAI,GAAG,CAAC,IAAI,CAAC,8BAA8B,CAAC,CAAC;oBACjF,6BAA6B,CAAC,GAAG,CAAC,SAAS,EAAE,UAAU,CAAC,CAAC;oBACzD,IAAI,CAAC,iBAAiB,CAAC,EAAE,6BAA6B,EAAE,CAAC,CAAC;gBAC5D,CAAC;gBACD,mBAAmB,EAAE,CAAC,SAA0B,EAAE,EAAE;oBAClD,IAAI,6BAA6B,GAAG,IAAI,GAAG,CAAC,IAAI,CAAC,8BAA8B,CAAC,CAAC;oBACjF,6BAA6B,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC;oBAChD,IAAI,CAAC,iBAAiB,CAAC,EAAE,6BAA6B,EAAE,CAAC,CAAC;gBAC5D,CAAC;gBACD,WAAW,EAAE,GAAG,EAAE;oBAChB,IAAI,IAAI,CAAC,sBAAsB,KAAK,IAAI,IAAI,QAAQ,CAAC,EAAE,KAAK,SAAS,EAAE;wBACrE,IAAI,UAAU,GAAG,cAAc,CAAC,IAAI,CAAC,gBAAgB,CAAC,OAAO,CAAE,CAAC;wBAChE,UAAU,CAAC,YAAY,CAAC,UAAU,CAAC,CAAC;qBACrC;gBACH,CAAC;aACF,CAAC;YAvHA,IAAI,CAAC,KAAK,GAAG;gBACX,EAAE,EAAE,IAAI;gBACR,aAAa,EAAE,KAAK,CAAC,UAAU,CAAC,OAAO;aACxC,CAAC;QACJ,CAAC;QAED,iBAAiB;YACf,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,aAAa,EAAE;gBAC7B,kFAAkF;gBAClF,IAAI,CAAC,aAAa,GAAG,IAAI,CAAC,KAAK,CAAC,UAAU,CAAC,WAAW,CAAC,GAAG,EAAE;oBAC1D,IAAI,CAAC,QAAQ,CAAC,EAAE,aAAa,EAAE,IAAI,EAAE,CAAC,CAAC;gBACzC,CAAC,CAAC,CAAC;aACJ;QACH,CAAC;QAED,oBAAoB;YAClB,IAAI,IAAI,CAAC,aAAa,EAAE;gBACtB,IAAI,CAAC,aAAa,CAAC,MAAM,EAAE,CAAC;gBAC5B,IAAI,CAAC,aAAa,GAAG,IAAI,CAAC;aAC3B;QACH,CAAC;QAED,MAAM;YACJ,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,aAAa,EAAE;gBAC7B,OAAO,IAAI,CAAC;aACb;YAED,IAAI,EAAE,UAAU,EAAE,GAAG,IAAI,CAAC,KAAK,CAAC;YAChC,IAAI,KAAK,GAAG,IAAI,CAAC,kBAAkB,EAAE,CAAC;YAEtC,IAAI,aAAa,GAAG,CAChB,CAAC,YAAY,CACX,GAAG,CAAC,CAAC,IAAI,CAAC,gBAAgB,CAAC,CAC3B,UAAU,CAAC,CAAC,UAAU,CAAC,WAAW,CAAC,CACnC,UAAU,CAAC,CAAC,IAAI,CAAC,eAAe,CAAC,CACjC;YAAA,CAAC,kBAAkB,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC,IAAI,CAAC,wBAAwB,CAAC,CAChE;cAAA,CAAC,iBAAiB,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC,IAAI,CAAC,uBAAuB,CAAC,CAC9D;gBAAA,CAAC,oBAAoB,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC,IAAI,CAAC,0BAA0B,CAAC,CACpE;kBAAA,CAAC,oBAAoB,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC,IAAI,CAAC,0BAA0B,CAAC,CACpE;oBAAA,CAAC,IAAI,CAAC,KAAK,CAAC,EAAE,CAAC,CAAC,CAAC,CACf,CAAC,SAAS,CACR,IAAI,KAAK,CAAC,CACV,QAAQ,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,EAAE,CAAC,EACxB,CACH,CAAC,CAAC,CAAC,IAAI,CACV;kBAAA,EAAE,oBAAoB,CAAC,QAAQ,CACjC;gBAAA,EAAE,oBAAoB,CAAC,QAAQ,CACjC;cAAA,EAAE,iBAAiB,CAAC,QAAQ,CAC9B;YAAA,EAAE,kBAAkB,CAAC,QAAQ,CAC/B;UAAA,EAAE,YAAY,CAAC,CAClB,CAAC;YAEF,IAAI,cAAc,EAAE;gBAClB,OAAO,CACL,CAAC,cAAc,CACb;YAAA,CAAC,aAAa,CAChB;UAAA,EAAE,cAAc,CAAC,CAClB,CAAC;aACH;YAED,OAAO,aAAa,CAAC;QACvB,CAAC;QAED,kBAAkB;YAChB,IAAI,EAAE,UAAU,EAAE,UAAU,EAAE,GAAG,KAAK,EAAE,GAAG,IAAI,CAAC,KAAY,CAAC;YAC7D,OAAO,KAAU,CAAC;QACpB,CAAC;QAuDD;;;;WAIG;QACH,iBAAiB,CAAC,EAChB,qBAAqB,GAAG,IAAI,CAAC,sBAAsB,EACnD,oBAAoB,GAAG,IAAI,CAAC,qBAAqB,EACjD,6BAA6B,GAAG,IAAI,CAAC,8BAA8B,GACrD;YACd,IAAI,kBAAkB,GAAG,qBAAqB,KAAK,IAAI,CAAC,sBAAsB,CAAC;YAC/E,IAAI,iBAAiB,GAAG,oBAAoB,KAAK,IAAI,CAAC,qBAAqB,CAAC;YAE5E,IAAI,0BAA0B,GAAG,CAAC,aAAa,CAC7C,IAAI,GAAG,CAAC,6BAA6B,CAAC,MAAM,EAAE,CAAC,EAC/C,IAAI,GAAG,CAAC,IAAI,CAAC,8BAA8B,CAAC,MAAM,EAAE,CAAC,CACtD,CAAC;YAEF,IAAI,kBAAkB,IAAI,iBAAiB,IAAI,0BAA0B,EAAE;gBACzE,IAAI,CAAC,sBAAsB,GAAG,qBAAqB,CAAC;gBACpD,IAAI,CAAC,qBAAqB,GAAG,oBAAoB,CAAC;gBAClD,IAAI,CAAC,8BAA8B,GAAG,6BAA6B,CAAC;gBAEpE,iEAAiE;gBACjE,IAAI,IAAI,CAAC,sBAAsB,KAAK,IAAI,IAAI,IAAI,CAAC,qBAAqB,KAAK,IAAI,EAAE;oBAC/E,UAAU,CAAC,gCAAgC,CACzC,UAAU,CAAC,cAAc,CAAC,IAAI,CAAC,gBAAgB,CAAC,OAAO,CAAC,CAAC,EACzD,IAAI,CAAC,sBAAsB,EAC3B,IAAI,CAAC,qBAAqB,EAC1B,CAAC,GAAG,IAAI,CAAC,8BAA8B,CAAC,MAAM,EAAE,CAAC,CAClD,CAAC;iBACH;aACF;QACH,CAAC;KACF,CAAC;AACJ,CAAC;AASD,MAAM,YAAY,GAAG,wBAAwB,CAAC,aAAa,CAAC,CAAC;AAqB7D,MAAM,CAAC,MAAM,iBAAiB,GAAG,KAAK,CAAC,aAAa,CAAgC,IAAI,CAAC,CAAC;AAC1F,MAAM,CAAC,MAAM,kBAAkB,GAAG,KAAK,CAAC,aAAa,CAAiC,IAAI,CAAC,CAAC;AAC5F,MAAM,CAAC,MAAM,oBAAoB,GAAG,KAAK,CAAC,aAAa,CAAmC,IAAI,CAAC,CAAC;AAChG,MAAM,CAAC,MAAM,oBAAoB,GAAG,KAAK,CAAC,aAAa,CAAmC,IAAI,CAAC,CAAC;AAmDhG,SAAS,aAAa,CAAI,IAAY,EAAE,IAAY;IAClD,IAAI,IAAI,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,EAAE;QAC3B,OAAO,KAAK,CAAC;KACd;IAED,KAAK,IAAI,IAAI,IAAI,IAAI,CAAC,MAAM,EAAE,EAAE;QAC9B,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,EAAE;YACnB,OAAO,KAAK,CAAC;SACd;KACF;IACD,OAAO,IAAI,CAAC;AACd,CAAC","sourcesContent":["import { EventSubscription } from 'fbemitter';\nimport nullthrows from 'nullthrows';\nimport React from 'react';\nimport { Platform, View, findNodeHandle } from 'react-native';\nimport { requireNativeViewManager } from '@unimodules/core';\n\nimport { NativeAdIconView } from './AdIconView';\nimport { NativeAdMediaView } from './AdMediaView';\nimport AdsManager from './NativeAdsManager';\n\nlet NativeAdLayout: React.ComponentType | null = Platform.OS === 'android' ? requireNativeViewManager('NativeAdLayout') : null;\n\ntype AdContainerProps<P> = {\n  adsManager: AdsManager;\n  // TODO: rename this to onAdLoad\n  onAdLoaded?: ((ad: NativeAd) => void) | null;\n} & Pick<P, Exclude<keyof P, keyof AdProps>>;\n\ntype AdContainerState = {\n  ad: NativeAd | null;\n  canRequestAds: boolean;\n};\n\ntype AdProps = { nativeAd: NativeAd };\n\ntype AdNodeHandles = {\n  adMediaViewNodeHandle?: number | null;\n  adIconViewNodeHandle?: number | null;\n  interactiveTriggerNodeHandles?: Map<React.Component, number>;\n};\n\n/**\n * A higher-order function that wraps the given `Component` type and returns a new container\n * component type that passes in an extra `nativeAd` prop to the wrapped component.\n *\n * The container component renders null if the native ads manager is not yet ready to display ads or\n * if no ad could be loaded.\n */\nexport default function withNativeAd<P>(\n  Component: React.ComponentType<P & AdProps>\n): React.ComponentType<AdContainerProps<P>> {\n  return class NativeAdContainer extends React.Component<AdContainerProps<P>, AdContainerState> {\n    _subscription: EventSubscription | null = null;\n    _nativeAdViewRef = React.createRef<NativeAdView>();\n    _adMediaViewNodeHandle: number | null = null;\n    _adIconViewNodeHandle: number | null = null;\n    _interactiveTriggerNodeHandles: Map<React.Component, number> = new Map();\n\n    state: AdContainerState;\n\n    constructor(props: AdContainerProps<P>) {\n      super(props);\n      this.state = {\n        ad: null,\n        canRequestAds: props.adsManager.isValid,\n      };\n    }\n\n    componentDidMount() {\n      if (!this.state.canRequestAds) {\n        // On mounting, listen to the ads manager to learn when it is ready to display ads\n        this._subscription = this.props.adsManager.onAdsLoaded(() => {\n          this.setState({ canRequestAds: true });\n        });\n      }\n    }\n\n    componentWillUnmount() {\n      if (this._subscription) {\n        this._subscription.remove();\n        this._subscription = null;\n      }\n    }\n\n    render() {\n      if (!this.state.canRequestAds) {\n        return null;\n      }\n\n      let { adsManager } = this.props;\n      let props = this._getForwardedProps();\n\n      let viewHierarchy = (\n          <NativeAdView\n            ref={this._nativeAdViewRef}\n            adsManager={adsManager.placementId}\n            onAdLoaded={this._handleAdLoaded}>\n            <AdMediaViewContext.Provider value={this._adMediaViewContextValue}>\n              <AdIconViewContext.Provider value={this._adIconViewContextValue}>\n                <AdTriggerViewContext.Provider value={this._adTriggerViewContextValue}>\n                  <AdOptionsViewContext.Provider value={this._adOptionsViewContextValue}>\n                    {this.state.ad ? (\n                      <Component\n                        {...props}\n                        nativeAd={this.state.ad}\n                      />\n                    ) : null}\n                  </AdOptionsViewContext.Provider>\n                </AdTriggerViewContext.Provider>\n              </AdIconViewContext.Provider>\n            </AdMediaViewContext.Provider>\n          </NativeAdView>\n      );\n\n      if (NativeAdLayout) {\n        return (\n          <NativeAdLayout>\n            {viewHierarchy}\n          </NativeAdLayout>\n        );\n      }\n\n      return viewHierarchy;\n    }\n\n    _getForwardedProps(): P {\n      let { adsManager, onAdLoaded, ...props } = this.props as any;\n      return props as P;\n    }\n\n    _handleAdLoaded = ({ nativeEvent: ad }: { nativeEvent: NativeAd }) => {\n      this.setState({ ad }, () => {\n        if (this.props.onAdLoaded) {\n          let ad = nullthrows(this.state.ad);\n          this.props.onAdLoaded(ad);\n        }\n      });\n    };\n\n    _adMediaViewContextValue = {\n      nativeRef: (component: NativeAdMediaView | null) => {\n        if (component) {\n          this._setAdNodeHandles({ adMediaViewNodeHandle: nullthrows(findNodeHandle(component)) });\n        } else {\n          this._setAdNodeHandles({ adMediaViewNodeHandle: null });\n        }\n      },\n    };\n\n    _adOptionsViewContextValue = {\n      nativeAdViewRef: this._nativeAdViewRef\n    };\n\n    _adIconViewContextValue = {\n      nativeRef: (component: NativeAdIconView | null) => {\n        if (component) {\n          this._setAdNodeHandles({ adIconViewNodeHandle: nullthrows(findNodeHandle(component)) });\n        } else {\n          this._setAdNodeHandles({ adIconViewNodeHandle: null });\n        }\n      },\n    };\n\n    _adTriggerViewContextValue = {\n      registerComponent: (component: React.Component) => {\n        let nodeHandle = nullthrows(findNodeHandle(component));\n        let interactiveTriggerNodeHandles = new Map(this._interactiveTriggerNodeHandles);\n        interactiveTriggerNodeHandles.set(component, nodeHandle);\n        this._setAdNodeHandles({ interactiveTriggerNodeHandles });\n      },\n      unregisterComponent: (component: React.Component) => {\n        let interactiveTriggerNodeHandles = new Map(this._interactiveTriggerNodeHandles);\n        interactiveTriggerNodeHandles.delete(component);\n        this._setAdNodeHandles({ interactiveTriggerNodeHandles });\n      },\n      onTriggerAd: () => {\n        if (this._adMediaViewNodeHandle !== null && Platform.OS === 'android') {\n          let nodeHandle = findNodeHandle(this._nativeAdViewRef.current)!;\n          AdsManager.triggerEvent(nodeHandle);\n        }\n      },\n    };\n\n    /**\n     * Updates the registered ad views given their node handles. The node handles are not stored in\n     * this component's state nor does this method call \"setState\" to avoid unnecessarily\n     * re-rendering.\n     */\n    _setAdNodeHandles({\n      adMediaViewNodeHandle = this._adMediaViewNodeHandle,\n      adIconViewNodeHandle = this._adIconViewNodeHandle,\n      interactiveTriggerNodeHandles = this._interactiveTriggerNodeHandles,\n    }: AdNodeHandles): void {\n      let adMediaViewChanged = adMediaViewNodeHandle !== this._adMediaViewNodeHandle;\n      let adIconViewChanged = adIconViewNodeHandle !== this._adIconViewNodeHandle;\n\n      let interactiveTriggersChanged = !_areEqualSets(\n        new Set(interactiveTriggerNodeHandles.values()),\n        new Set(this._interactiveTriggerNodeHandles.values())\n      );\n\n      if (adMediaViewChanged || adIconViewChanged || interactiveTriggersChanged) {\n        this._adMediaViewNodeHandle = adMediaViewNodeHandle;\n        this._adIconViewNodeHandle = adIconViewNodeHandle;\n        this._interactiveTriggerNodeHandles = interactiveTriggerNodeHandles;\n\n        // TODO: handle unregistering views when components are unmounted\n        if (this._adMediaViewNodeHandle !== null && this._adIconViewNodeHandle !== null) {\n          AdsManager.registerViewsForInteractionAsync(\n            nullthrows(findNodeHandle(this._nativeAdViewRef.current)),\n            this._adMediaViewNodeHandle,\n            this._adIconViewNodeHandle,\n            [...this._interactiveTriggerNodeHandles.values()]\n          );\n        }\n      }\n    }\n  };\n}\n\ntype NativeAdViewProps = {\n  adsManager: string;\n  onAdLoaded?: (event: { nativeEvent: NativeAd }) => void;\n} & React.ComponentProps<typeof View>;\n\ntype NativeAdView = React.Component<NativeAdViewProps>;\n\nconst NativeAdView = requireNativeViewManager('CTKNativeAd');\n\n// React contexts for ad views that need to register with the ad container\nexport type AdIconViewContextValue = {\n  nativeRef: (component: NativeAdMediaView | null) => void;\n};\n\nexport type AdMediaViewContextValue = {\n  nativeRef: (component: NativeAdIconView | null) => void;\n};\n\nexport type AdTriggerViewContextValue = {\n  registerComponent: (component: React.Component) => void;\n  unregisterComponent: (component: React.Component) => void;\n  onTriggerAd: () => void;\n};\n\nexport type AdOptionsViewContextValue = {\n  nativeAdViewRef: React.RefObject<NativeAdView>;\n};\n\nexport const AdIconViewContext = React.createContext<AdIconViewContextValue | null>(null);\nexport const AdMediaViewContext = React.createContext<AdMediaViewContextValue | null>(null);\nexport const AdTriggerViewContext = React.createContext<AdTriggerViewContextValue | null>(null);\nexport const AdOptionsViewContext = React.createContext<AdOptionsViewContextValue | null>(null);\n\nexport type NativeAd = {\n  /**\n   * The headline the advertiser entered when they created their ad. This is usually the ad's main\n   * title.\n   */\n  headline?: string;\n\n  /**\n   * The link description which is additional information that the advertiser may have entered\n   */\n  linkDescription?: string;\n\n  /**\n   * The name of the Facebook Page or mobile app that represents the business running the ad\n   */\n  advertiserName?: string;\n\n  /**\n   * The ad's social context, such as, \"Over half a million users\"\n   */\n  socialContext?: string;\n\n  /**\n   * The call-to-action phrase of the ad, such as, \"Install Now\"\n   */\n  callToActionText?: string;\n\n  /**\n   * The body text, truncated to 90 characters, that contains the text the advertiser entered when\n   * they created their ad to tell people what the ad promotes\n   */\n  bodyText?: string;\n\n  /**\n   * The word \"ad\", translated into the viewer's language\n   */\n  adTranslation?: string;\n\n  /**\n   * The word \"promoted\", translated into the viewer's language\n   */\n  promotedTranslation?: string;\n\n  /**\n   * The word \"sponsored\", translated into the viewer's language\n   */\n  sponsoredTranslation?: string;\n};\n\nfunction _areEqualSets<T>(set1: Set<T>, set2: Set<T>): boolean {\n  if (set1.size !== set2.size) {\n    return false;\n  }\n\n  for (let item of set1.values()) {\n    if (!set2.has(item)) {\n      return false;\n    }\n  }\n  return true;\n}\n"]}