{"version":3,"file":"Brightness.js","sourceRoot":"","sources":["../src/Brightness.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,QAAQ,EAAE,MAAM,cAAc,CAAC;AACxC,OAAO,EAAE,kBAAkB,EAAE,MAAM,kBAAkB,CAAC;AAEtD,MAAM,CAAN,IAAY,cAIX;AAJD,WAAY,cAAc;IACxB,yDAAW,CAAA;IACX,6DAAa,CAAA;IACb,uDAAU,CAAA;AACZ,CAAC,EAJW,cAAc,KAAd,cAAc,QAIzB;AAAA,CAAC;AAEF,MAAM,CAAC,KAAK,UAAU,kBAAkB;IACtC,OAAO,MAAM,kBAAkB,CAAC,cAAc,CAAC,kBAAkB,EAAE,CAAC;AACtE,CAAC;AAED,MAAM,CAAC,KAAK,UAAU,kBAAkB,CAAC,eAAuB;IAC9D,IAAI,sBAAsB,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC,EAAE,IAAI,CAAC,GAAG,CAAC,eAAe,EAAE,CAAC,CAAC,CAAC,CAAC;IACvE,IAAI,KAAK,CAAC,sBAAsB,CAAC,EAAE;QACjC,MAAM,IAAI,SAAS,CAAC,4CAA4C,eAAe,EAAE,CAAC,CAAC;KACpF;IACD,OAAO,MAAM,kBAAkB,CAAC,cAAc,CAAC,kBAAkB,CAAC,sBAAsB,CAAC,CAAC;AAC5F,CAAC;AAED,MAAM,CAAC,KAAK,UAAU,wBAAwB;IAC5C,IAAI,QAAQ,CAAC,EAAE,KAAK,SAAS,EAAE;QAC7B,OAAO,MAAM,kBAAkB,EAAE,CAAC;KACnC;IACD,OAAO,MAAM,kBAAkB,CAAC,cAAc,CAAC,wBAAwB,EAAE,CAAC;AAC5E,CAAC;AAED,MAAM,CAAC,KAAK,UAAU,wBAAwB,CAAC,eAAuB;IACpE,IAAI,sBAAsB,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC,EAAE,IAAI,CAAC,GAAG,CAAC,eAAe,EAAE,CAAC,CAAC,CAAC,CAAC;IACvE,IAAI,KAAK,CAAC,sBAAsB,CAAC,EAAE;QACjC,MAAM,IAAI,SAAS,CAAC,kDAAkD,eAAe,EAAE,CAAC,CAAC;KAC1F;IACD,IAAI,QAAQ,CAAC,EAAE,KAAK,SAAS,EAAE;QAC7B,OAAO,MAAM,kBAAkB,CAAC,sBAAsB,CAAC,CAAC;KACzD;IACD,OAAO,MAAM,kBAAkB,CAAC,cAAc,CAAC,wBAAwB,CAAC,sBAAsB,CAAC,CAAC;AAClG,CAAC;AAED,MAAM,CAAC,KAAK,UAAU,wBAAwB;IAC5C,IAAI,QAAQ,CAAC,EAAE,KAAK,SAAS,EAAE;QAC7B,OAAO;KACR;IACD,OAAO,MAAM,kBAAkB,CAAC,cAAc,CAAC,wBAAwB,EAAE,CAAC;AAC5E,CAAC;AAED,MAAM,CAAC,KAAK,UAAU,4BAA4B;IAChD,IAAI,QAAQ,CAAC,EAAE,KAAK,SAAS,EAAE;QAC7B,OAAO,KAAK,CAAC;KACd;IACD,OAAO,MAAM,kBAAkB,CAAC,cAAc,CAAC,4BAA4B,EAAE,CAAC;AAChF,CAAC;AAED,MAAM,CAAC,KAAK,UAAU,4BAA4B;IAChD,IAAI,QAAQ,CAAC,EAAE,KAAK,SAAS,EAAE;QAC7B,OAAO,cAAc,CAAC,OAAO,CAAC;KAC/B;IACD,OAAO,MAAM,kBAAkB,CAAC,cAAc,CAAC,4BAA4B,EAAE,CAAC;AAChF,CAAC;AAED,MAAM,CAAC,KAAK,UAAU,4BAA4B,CAAC,cAA8B;IAC/E,IAAI,QAAQ,CAAC,EAAE,KAAK,SAAS,IAAI,cAAc,KAAK,cAAc,CAAC,OAAO,EAAE;QAC1E,OAAO;KACR;IACD,OAAO,MAAM,kBAAkB,CAAC,cAAc,CAAC,4BAA4B,CAAC,cAAc,CAAC,CAAC;AAC9F,CAAC","sourcesContent":["import { Platform } from 'react-native';\nimport { NativeModulesProxy } from '@unimodules/core';\n\nexport enum BrightnessMode {\n  UNKNOWN = 0,\n  AUTOMATIC = 1,\n  MANUAL = 2,\n};\n\nexport async function getBrightnessAsync(): Promise<number> {\n  return await NativeModulesProxy.ExpoBrightness.getBrightnessAsync();\n}\n\nexport async function setBrightnessAsync(brightnessValue: number): Promise<void> {\n  let clampedBrightnessValue = Math.max(0, Math.min(brightnessValue, 1));\n  if (isNaN(clampedBrightnessValue)) {\n    throw new TypeError(`setBrightnessAsync cannot be called with ${brightnessValue}`);\n  }\n  return await NativeModulesProxy.ExpoBrightness.setBrightnessAsync(clampedBrightnessValue);\n}\n\nexport async function getSystemBrightnessAsync(): Promise<number> {\n  if (Platform.OS !== 'android') {\n    return await getBrightnessAsync();\n  }\n  return await NativeModulesProxy.ExpoBrightness.getSystemBrightnessAsync();\n}\n\nexport async function setSystemBrightnessAsync(brightnessValue: number): Promise<void> {\n  let clampedBrightnessValue = Math.max(0, Math.min(brightnessValue, 1));\n  if (isNaN(clampedBrightnessValue)) {\n    throw new TypeError(`setSystemBrightnessAsync cannot be called with ${brightnessValue}`);\n  }\n  if (Platform.OS !== 'android') {\n    return await setBrightnessAsync(clampedBrightnessValue);\n  }\n  return await NativeModulesProxy.ExpoBrightness.setSystemBrightnessAsync(clampedBrightnessValue);\n}\n\nexport async function useSystemBrightnessAsync(): Promise<void> {\n  if (Platform.OS !== 'android') {\n    return;\n  }\n  return await NativeModulesProxy.ExpoBrightness.useSystemBrightnessAsync();\n}\n\nexport async function isUsingSystemBrightnessAsync(): Promise<boolean> {\n  if (Platform.OS !== 'android') {\n    return false;\n  }\n  return await NativeModulesProxy.ExpoBrightness.isUsingSystemBrightnessAsync();\n}\n\nexport async function getSystemBrightnessModeAsync(): Promise<BrightnessMode> {\n  if (Platform.OS !== 'android') {\n    return BrightnessMode.UNKNOWN;\n  }\n  return await NativeModulesProxy.ExpoBrightness.getSystemBrightnessModeAsync();\n}\n\nexport async function setSystemBrightnessModeAsync(brightnessMode: BrightnessMode): Promise<void> {\n  if (Platform.OS !== 'android' || brightnessMode === BrightnessMode.UNKNOWN) {\n    return;\n  }\n  return await NativeModulesProxy.ExpoBrightness.setSystemBrightnessModeAsync(brightnessMode);\n}\n"]}