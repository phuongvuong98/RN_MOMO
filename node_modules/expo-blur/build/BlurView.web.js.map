{"version":3,"file":"BlurView.web.js","sourceRoot":"","sources":["../src/BlurView.web.tsx"],"names":[],"mappings":"AAAA,OAAO,SAAS,MAAM,YAAY,CAAC;AACnC,OAAO,KAAK,KAAK,MAAM,OAAO,CAAC;AAC/B,OAAO,EAAE,IAAI,EAAE,aAAa,EAAE,MAAM,cAAc,CAAC;AAGnD,OAAO,kBAAkB,MAAM,sBAAsB,CAAC;AAEtD,MAAM,CAAC,OAAO,OAAO,QAAS,SAAQ,KAAK,CAAC,SAAgB;IAW1D,MAAM;QACJ,IAAI,EAAE,IAAI,EAAE,SAAS,EAAE,KAAK,GAAG,EAAE,EAAE,GAAG,KAAK,EAAE,GAAG,IAAI,CAAC,KAAK,CAAC;QAE3D,MAAM,SAAS,GAAG,YAAY,CAAC,EAAE,IAAI,EAAE,SAAS,EAAE,CAAC,CAAC;QAEpD,OAAO,CAAC,IAAI,CAAC,IAAI,KAAK,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,KAAK,EAAE,SAAS,CAAC,CAAC,EAAG,CAAC;IACxD,CAAC;;AAhBM,kBAAS,GAAG;IACjB,IAAI,EAAE,SAAS,CAAC,KAAK,CAAC,CAAC,OAAO,EAAE,SAAS,EAAE,MAAM,CAAC,CAAC;IACnD,GAAG,aAAa;CACjB,CAAC;AAEK,qBAAY,GAAG;IACpB,IAAI,EAAE,SAAqB;IAC3B,SAAS,EAAE,EAAE;CACd,CAAC;AAWJ,SAAS,eAAe;IACtB,gEAAgE;IAChE,yFAAyF;IACzF,iDAAiD;IACjD,OAAO,OAAO,GAAG,KAAK,WAAW,IAAI,GAAG,CAAC,QAAQ,CAAC,yBAAyB,EAAE,WAAW,CAAC,CAAC;IAC1F,8EAA8E;IAC9E,kDAAkD;AACpD,CAAC;AAED,SAAS,YAAY,CAAC,EAAE,SAAS,EAAE,IAAI,EAAE;IACvC,IAAI,eAAe,EAAE,EAAE;QACrB,IAAI,cAAc,GAAG,QAAQ,SAAS,GAAG,IAAI,KAAK,CAAC;QACnD,IAAI,IAAI,KAAK,MAAM,EAAE;YACnB,cAAc,IAAI,kBAAkB,CAAC;SACtC;aAAM,IAAI,IAAI,KAAK,OAAO,EAAE;YAC3B,cAAc,IAAI,mBAAmB,CAAC;SACvC;QACD,OAAO;YACL,cAAc;SACf,CAAC;KACH;SAAM;QACL,IAAI,eAAe,GAAG,kBAAkB,CAAC,SAAS,EAAE,IAAI,CAAC,CAAC;QAC1D,OAAO,EAAE,eAAe,EAAE,CAAC;KAC5B;AACH,CAAC","sourcesContent":["import PropTypes from 'prop-types';\nimport * as React from 'react';\nimport { View, ViewPropTypes } from 'react-native';\n\nimport { BlurTint, Props } from './BlurView.types';\nimport getBackgroundColor from './getBackgroundColor';\n\nexport default class BlurView extends React.Component<Props> {\n  static propTypes = {\n    tint: PropTypes.oneOf(['light', 'default', 'dark']),\n    ...ViewPropTypes,\n  };\n\n  static defaultProps = {\n    tint: 'default' as BlurTint,\n    intensity: 50,\n  };\n\n  render() {\n    let { tint, intensity, style = {}, ...props } = this.props;\n\n    const blurStyle = getBlurStyle({ tint, intensity });\n\n    return <View {...props} style={[style, blurStyle]} />;\n  }\n}\n\nfunction isBlurSupported(): boolean {\n  // https://developer.mozilla.org/en-US/docs/Web/API/CSS/supports\n  // https://developer.mozilla.org/en-US/docs/Web/CSS/backdrop-filter#Browser_compatibility\n  // TODO: Bacon: Chrome blur seems broken natively\n  return typeof CSS !== 'undefined' && CSS.supports('-webkit-backdrop-filter', 'blur(1px)');\n  // TODO: Bacon: Chrome doesn't work, RNWeb uses webkit on Safari, which works.\n  // || CSS.supports('backdrop-filter', 'blur(1px)')\n}\n\nfunction getBlurStyle({ intensity, tint }): { [key: string]: string } {\n  if (isBlurSupported()) {\n    let backdropFilter = `blur(${intensity * 0.25}px)`;\n    if (tint === 'dark') {\n      backdropFilter += ' brightness(50%)';\n    } else if (tint === 'light') {\n      backdropFilter += ' brightness(150%)';\n    }\n    return {\n      backdropFilter,\n    };\n  } else {\n    let backgroundColor = getBackgroundColor(intensity, tint);\n    return { backgroundColor };\n  }\n}\n"]}