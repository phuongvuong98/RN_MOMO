{"version":3,"file":"BlurView.ios.js","sourceRoot":"","sources":["../src/BlurView.ios.tsx"],"names":[],"mappings":"AAAA,OAAO,EAAE,kBAAkB,EAAE,wBAAwB,EAAE,MAAM,kBAAkB,CAAC;AAChF,OAAO,SAAS,MAAM,YAAY,CAAC;AACnC,OAAO,KAAK,KAAK,MAAM,OAAO,CAAC;AAC/B,OAAO,EAAE,cAAc,EAAE,aAAa,EAAE,MAAM,cAAc,CAAC;AAI7D,MAAM,CAAC,OAAO,OAAO,QAAS,SAAQ,KAAK,CAAC,SAAgB;IAA5D;;QAYE,UAAK,GAAsB,IAAI,CAAC;QAEhC,kBAAa,GAAG,CAAC,GAAsB,EAAE,EAAE;YACzC,IAAI,CAAC,KAAK,GAAG,GAAG,CAAC;QACnB,CAAC,CAAC;QAEF,mBAAc,GAAG,WAAW,CAAC,EAAE;YAC7B,IAAI,IAAI,CAAC,KAAK,EAAE;gBACd,kBAAkB,CAAC,mBAAmB,CAAC,WAAW,CAAC,WAAW,EAAE,cAAc,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC;aAC7F;QACH,CAAC,CAAC;IAYJ,CAAC;IAVC,MAAM;QACJ,IAAI,EAAE,KAAK,EAAE,GAAG,KAAK,EAAE,GAAG,IAAI,CAAC,KAAK,CAAC;QACrC,OAAO,CACL,CAAC,cAAc,CACb,IAAI,KAAK,CAAC,CACV,GAAG,CAAC,CAAC,IAAI,CAAC,aAAa,CAAC,CACxB,KAAK,CAAC,CAAC,CAAC,KAAK,EAAE,EAAE,eAAe,EAAE,aAAa,EAAE,CAAC,CAAC,EACnD,CACH,CAAC;IACJ,CAAC;;AAhCM,kBAAS,GAAG;IACjB,GAAG,aAAa;IAChB,IAAI,EAAE,SAAS,CAAC,KAAK,CAAC,CAAC,OAAO,EAAE,SAAS,EAAE,MAAM,CAAe,CAAC,CAAC,UAAU;IAC5E,SAAS,EAAE,SAAS,CAAC,MAAM,CAAC,UAAU;CACvC,CAAC;AAEK,qBAAY,GAAG;IACpB,IAAI,EAAE,SAAqB;IAC3B,SAAS,EAAE,EAAE;CACd,CAAC;AA0BJ,MAAM,cAAc,GAAG,wBAAwB,CAAC,cAAc,CAAC,CAAC","sourcesContent":["import { NativeModulesProxy, requireNativeViewManager } from '@unimodules/core';\nimport PropTypes from 'prop-types';\nimport * as React from 'react';\nimport { findNodeHandle, ViewPropTypes } from 'react-native';\n\nimport { BlurTint, ComponentOrHandle, Props } from './BlurView.types';\n\nexport default class BlurView extends React.Component<Props> {\n  static propTypes = {\n    ...ViewPropTypes,\n    tint: PropTypes.oneOf(['light', 'default', 'dark'] as BlurTint[]).isRequired,\n    intensity: PropTypes.number.isRequired,\n  };\n\n  static defaultProps = {\n    tint: 'default' as BlurTint,\n    intensity: 50,\n  };\n\n  _root: ComponentOrHandle = null;\n\n  _setNativeRef = (ref: ComponentOrHandle) => {\n    this._root = ref;\n  };\n\n  setNativeProps = nativeProps => {\n    if (this._root) {\n      NativeModulesProxy.ExpoBlurViewManager.updateProps(nativeProps, findNodeHandle(this._root));\n    }\n  };\n\n  render() {\n    let { style, ...props } = this.props;\n    return (\n      <NativeBlurView\n        {...props}\n        ref={this._setNativeRef}\n        style={[style, { backgroundColor: 'transparent' }]}\n      />\n    );\n  }\n}\n\nconst NativeBlurView = requireNativeViewManager('ExpoBlurView');\n"]}